{"ast":null,"code":"var _jsxFileName = \"/home/snuc/dev/presentable-projects/dayfeed/app/src/components/organisms/feed-manager/FeedManager.tsx\";\nimport React from 'react';\nimport { Editor, Header, EditorPanels, Sidebar, Cell, EditorWrapper, NewFeedButton } from './styled';\nimport FeedEditor from '../feed-editor/FeedEditor';\nimport { SourceCountryOptions, LanguageOptions, CategoryOptions } from '../../../lib/api/types';\nimport getNewsService from '../../../api/news';\nimport { useFeedState, useFeedDispatch } from '../../../state/feedContext';\nimport { v4 } from 'uuid';\n\nconst FeedManager = props => {\n  const [sources, setSources] = React.useState([]);\n  const [selectedFeed, setSelected] = React.useState(0);\n  const {\n    feeds\n  } = useFeedState();\n  const dispatch = useFeedDispatch();\n  React.useEffect(() => {\n    async function getSources() {\n      let feed = feeds[selectedFeed];\n      let service = getNewsService();\n      service.getSources(feed ? feed.topic : undefined, feed ? feed.language : undefined, feed ? feed.country : undefined).then(res => {\n        let sources = [];\n        res.forEach(s => {\n          if (s.id && s.name) sources.push({\n            name: s.name,\n            id: s.id\n          });\n        });\n        setSources(sources);\n      });\n    }\n\n    getSources();\n  }, [selectedFeed, feeds]);\n\n  const updateFeed = feed => dispatch({\n    type: 'update',\n    payload: {\n      feed: feed\n    }\n  });\n\n  const onFeedAdded = () => {\n    let newFeed = {\n      id: v4(),\n      name: 'New Feed',\n      includedKeywords: [],\n      optionalKeywords: [],\n      excludedKeywords: [],\n      sources: []\n    };\n    dispatch({\n      type: 'add',\n      payload: {\n        feed: newFeed\n      }\n    });\n  };\n\n  const onFeedDeleted = feed => dispatch({\n    type: 'remove',\n    payload: {\n      feed: feed\n    }\n  });\n\n  return /*#__PURE__*/React.createElement(Editor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, \"Feeds\")), /*#__PURE__*/React.createElement(EditorPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Sidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, feeds.map((f, i) => /*#__PURE__*/React.createElement(Cell, {\n    key: i,\n    selected: feeds[selectedFeed].id === f.id,\n    onClick: () => {\n      console.log(i);\n      setSelected(i);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 41\n    }\n  }, f.name)), /*#__PURE__*/React.createElement(NewFeedButton, {\n    onClick: onFeedAdded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, \"+ New Feed\")), /*#__PURE__*/React.createElement(EditorWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, feeds.length > 0 ? /*#__PURE__*/React.createElement(FeedEditor, {\n    onFeedChanged: updateFeed,\n    onFeedDeleted: onFeedDeleted,\n    feed: feeds[selectedFeed],\n    sourceOptions: sources,\n    countryOptions: SourceCountryOptions.slice(),\n    topicOptions: CategoryOptions.slice(),\n    languageOptions: LanguageOptions.slice(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }) : 'You have no Feeds! Create a new one ðŸŒž')));\n};\n\nexport default FeedManager;","map":{"version":3,"sources":["/home/snuc/dev/presentable-projects/dayfeed/app/src/components/organisms/feed-manager/FeedManager.tsx"],"names":["React","Editor","Header","EditorPanels","Sidebar","Cell","EditorWrapper","NewFeedButton","FeedEditor","SourceCountryOptions","LanguageOptions","CategoryOptions","getNewsService","useFeedState","useFeedDispatch","v4","FeedManager","props","sources","setSources","useState","selectedFeed","setSelected","feeds","dispatch","useEffect","getSources","feed","service","topic","undefined","language","country","then","res","forEach","s","id","name","push","updateFeed","type","payload","onFeedAdded","newFeed","includedKeywords","optionalKeywords","excludedKeywords","onFeedDeleted","map","f","i","console","log","length","slice"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Editor, Header, EditorPanels, Sidebar, Cell, EditorWrapper, NewFeedButton } from './styled';\nimport { NewsFeed, NewsSource } from '../../../lib/client/types';\nimport FeedEditor from '../feed-editor/FeedEditor';\nimport { SourceCountryOptions, LanguageOptions, CategoryOptions, Category, Language, SourceCountry } from '../../../lib/api/types';\nimport getNewsService from '../../../api/news';\nimport { useFeedState, useFeedDispatch } from '../../../state/feedContext';\nimport { v4 } from 'uuid';\n\n\nconst FeedManager: React.FC = props => {\n    const [sources, setSources] = React.useState<NewsSource[]>([]);\n    const [selectedFeed, setSelected] = React.useState<number>(0);\n    const { feeds } = useFeedState();\n    const dispatch = useFeedDispatch();\n    \n    React.useEffect(() => {\n        async function getSources() {\n            let feed = feeds[selectedFeed];\n            let service = getNewsService();\n            service.getSources(\n                feed ? feed.topic as Category : undefined,\n                feed ? feed.language as Language : undefined,\n                feed ? feed.country as SourceCountry : undefined)\n            .then(res => {\n                let sources: NewsSource[] = []\n                res.forEach(s => { if (s.id && s.name) sources.push({name: s.name, id: s.id}) })\n                setSources(sources);\n            })\n        }\n\n        getSources()\n    }, [selectedFeed, feeds]);\n\n    const updateFeed = (feed: NewsFeed) => dispatch({type: 'update', payload: {feed: feed}})\n\n    const onFeedAdded = () => {\n        let newFeed: NewsFeed = {\n            id: v4(),\n            name: 'New Feed',\n            includedKeywords: [],\n            optionalKeywords: [],\n            excludedKeywords: [],\n            sources: []\n        }\n        dispatch({type: 'add', payload: {feed: newFeed}})\n    }\n\n    const onFeedDeleted = (feed: NewsFeed) => dispatch({type: 'remove', payload: {feed: feed}})\n\n    return (\n        <Editor>\n            <Header>\n                <h3>Feeds</h3>\n            </Header>\n            <EditorPanels>\n                <Sidebar>\n                    {feeds.map((f,i) => <Cell key={i} selected={feeds[selectedFeed].id === f.id} onClick={() => {console.log(i); setSelected(i)}}>{f.name}</Cell>)}\n                    <NewFeedButton onClick={onFeedAdded}>+ New Feed</NewFeedButton>\n                </Sidebar>\n                <EditorWrapper>\n                    { feeds.length > 0 ? \n                        <FeedEditor \n                            onFeedChanged={updateFeed}\n                            onFeedDeleted={onFeedDeleted} \n                            feed={feeds[selectedFeed]} \n                            sourceOptions={sources} \n                            countryOptions={SourceCountryOptions.slice()} \n                            topicOptions={CategoryOptions.slice()} \n                            languageOptions={LanguageOptions.slice()} \n                        /> \n                    : 'You have no Feeds! Create a new one ðŸŒž'}\n                </EditorWrapper>\n            </EditorPanels>\n        </Editor>\n    )\n}\n\nexport default FeedManager;"]},"metadata":{},"sourceType":"module"}