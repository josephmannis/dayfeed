{"ast":null,"code":"const getBaseUrl = loc => `https://newsapi.org/v2/${loc}?`;\n\nconst defualtHeadlineCountry = 'us';\nconst CACHE_TIME = 3.6e+6; // 1 hour\n\nexport default function getNewsService() {\n  return {\n    getSources: getSources,\n    searchAllArticles: searchAllArticles,\n    searchTopHeadlines: searchTopHeadlines\n  };\n}\n\nfunction getSources(category, language, country) {\n  let url = getBaseUrl('sources');\n  url = `${url}${category ? `&category=${category}` : ''}${language ? `&language=${language}` : ''}${country ? `&country=${country}` : ''}`;\n  return cachedFetch(url).then(res => res.json()).then(res => res.sources).catch(error => error);\n}\n\nfunction searchAllArticles(query, pageSize, page, sortOrder) {\n  let url = getBaseUrl('everything');\n  url = `${url}${getKeywordString(query)}`;\n  return cachedFetch(url).then(res => res.json()).then(articles => articles).catch(error => {\n    console.log(error);\n    throw error;\n  });\n}\n\nfunction searchTopHeadlines(query, pageSize, page) {\n  const {\n    category,\n    language,\n    country,\n    sources\n  } = query;\n  let url = getBaseUrl('top-headlines');\n\n  if (sources.length > 0) {\n    url = `${url}&sources=${sources.join(',')}`;\n  } else {\n    url = `${url}${category ? `&category=${category}` : ''}&country=${country ? country : defualtHeadlineCountry}`;\n  }\n\n  url = `${url}${language ? `&language=${language}` : ''}`;\n  url = `${url}${getKeywordString(query)}`;\n  url = url.replace('&', '');\n  return cachedFetch(url).then(res => res.json()).then(sources => sources).catch(error => error);\n}\n\nfunction getKeywordString(query) {\n  let requiredKeywords = query.requiredKeywords.join('AND');\n  let optionalKeywords = query.optionalKeywords.join('OR');\n  let excludedKeywords = query.excludedKeywords.join('NOT');\n  if (requiredKeywords === '' && optionalKeywords === '' && excludedKeywords === '') return '';\n  return encodeURI(`&q=${requiredKeywords}${optionalKeywords}${excludedKeywords}`);\n}\n\nfunction cachedFetch(url) {\n  let cached = checkCache(url);\n  if (cached) return Promise.resolve(cached);\n  return fetch(url, {\n    headers: {\n      'Authorization': `Bearer ${process.env.REACT_APP_NEWSAPI_KEY}`\n    }\n  }).then(res => {\n    if (res.ok) cacheRequest(url, res);\n    return res;\n  });\n}\n\nfunction checkCache(url) {\n  const cached = localStorage.getItem(url);\n\n  if (cached) {\n    let parsed = JSON.parse(cached);\n\n    if (new Date().getTime() > parsed.expiry) {\n      localStorage.removeItem(url);\n    } else {\n      return new Response(new Blob([parsed.response]));\n    }\n  }\n\n  return undefined;\n}\n\nfunction cacheRequest(url, response) {\n  response.clone().text().then(data => {\n    let responseData = {\n      response: data,\n      expiry: new Date().getTime() + CACHE_TIME\n    };\n    localStorage.setItem(url, JSON.stringify(responseData));\n  });\n}","map":{"version":3,"sources":["/home/snuc/dev/presentable-projects/dayfeed/app/src/api/news/index.ts"],"names":["getBaseUrl","loc","defualtHeadlineCountry","CACHE_TIME","getNewsService","getSources","searchAllArticles","searchTopHeadlines","category","language","country","url","cachedFetch","then","res","json","sources","catch","error","query","pageSize","page","sortOrder","getKeywordString","articles","console","log","length","join","replace","requiredKeywords","optionalKeywords","excludedKeywords","encodeURI","cached","checkCache","Promise","resolve","fetch","headers","process","env","REACT_APP_NEWSAPI_KEY","ok","cacheRequest","localStorage","getItem","parsed","JSON","parse","Date","getTime","expiry","removeItem","Response","Blob","response","undefined","clone","text","data","responseData","setItem","stringify"],"mappings":"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","sourcesContent":["import { Category, Language, SourceCountry, Source, SortOrder, NewsQuery, HeadlineQuery, HeadlineCountry, ArticleResponse, CachedRequest } from \"../../lib/api/types\";\n\ntype location = 'top-headlines' | 'everything' | 'sources';\n\nconst getBaseUrl = (loc: location) => `https://newsapi.org/v2/${loc}?`\nconst defualtHeadlineCountry: HeadlineCountry = 'us'\nconst CACHE_TIME = 3.6e+6 // 1 hour\n\nexport interface INewsService {\n    getSources: (category?: Category, language?: Language, country?: SourceCountry) => Promise<Source[]>\n    searchAllArticles: (query: NewsQuery, pageSize: number, page: number, sortOrder?: SortOrder) => Promise<ArticleResponse>\n    searchTopHeadlines: (query: HeadlineQuery, pageSize: number, page: number) => Promise<ArticleResponse>\n}\n\nexport default function getNewsService(): INewsService {\n    return {\n        getSources: getSources,\n        searchAllArticles: searchAllArticles,\n        searchTopHeadlines: searchTopHeadlines\n    }\n}\n\nfunction getSources(category?: Category, language?: Language, country?: SourceCountry): Promise<Source[]> {\n    let url = getBaseUrl('sources');\n    url = `${url}${category ? `&category=${category}` : ''}${language ? `&language=${language}` : ''}${country ? `&country=${country}` : ''}`\n    return cachedFetch(url)\n        .then(res => res.json())\n        .then(res => res.sources)\n        .catch(error => error)\n}\n\nfunction searchAllArticles(query: NewsQuery, pageSize: number, page: number, sortOrder?: SortOrder): Promise<ArticleResponse> {\n    let url = getBaseUrl('everything')\n    url = `${url}${getKeywordString(query)}`\n\n    return cachedFetch(url)\n    .then(res => res.json())\n    .then(articles => articles)\n    .catch(error => {console.log(error); throw error})\n}\n\nfunction searchTopHeadlines(query: HeadlineQuery, pageSize: number, page: number): Promise<ArticleResponse> {\n    const {category, language, country, sources} = query;\n    let url = getBaseUrl('top-headlines')\n    if (sources.length > 0) {\n        url = `${url}&sources=${sources.join(',')}`\n    } else {\n        url = `${url}${category ? `&category=${category}` : ''}&country=${country ? country : defualtHeadlineCountry}`\n    }\n    url = `${url}${language ? `&language=${language}` : ''}`\n    url = `${url}${getKeywordString(query)}`\n    url = url.replace('&', '')\n\n    return cachedFetch(url)\n    .then(res => res.json())\n    .then(sources => sources)\n    .catch(error => error)\n}\n\nfunction getKeywordString(query: NewsQuery | HeadlineQuery): string {\n    let requiredKeywords = query.requiredKeywords.join('AND');\n    let optionalKeywords = query.optionalKeywords.join('OR');\n    let excludedKeywords = query.excludedKeywords.join('NOT');\n\n    if (requiredKeywords === '' && optionalKeywords === '' && excludedKeywords === '') return ''\n    return encodeURI(`&q=${requiredKeywords}${optionalKeywords}${excludedKeywords}`)\n}\n\nfunction cachedFetch(url: string): Promise<Response> {\n    let cached = checkCache(url);\n    if (cached) return Promise.resolve(cached)\n\n    return fetch(\n        url, \n        { \n            headers: { \n                'Authorization': `Bearer ${process.env.REACT_APP_NEWSAPI_KEY}` \n            } \n        })\n        .then(res => {\n            if (res.ok) cacheRequest(url, res);\n            return res;\n        })\n}\n\nfunction checkCache(url: string): Response | undefined {\n    const cached = localStorage.getItem(url);\n    \n    if (cached) {\n        let parsed: CachedRequest = JSON.parse(cached);\n        if (new Date().getTime() > parsed.expiry) {\n            localStorage.removeItem(url)\n        } else {\n            return new Response(new Blob([parsed.response]));\n        }\n    }\n\n    return undefined;\n}\n\nfunction cacheRequest(url: string, response: Response) {\n    response.clone().text().then(data => {\n        let responseData: CachedRequest = {\n            response: data,\n            expiry: new Date().getTime() + CACHE_TIME\n        }\n        localStorage.setItem(url, JSON.stringify(responseData))\n    });\n}"]},"metadata":{},"sourceType":"module"}