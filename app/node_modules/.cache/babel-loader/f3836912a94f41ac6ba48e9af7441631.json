{"ast":null,"code":"var _jsxFileName = \"/home/snuc/dev/presentable-projects/dayfeed/app/src/state/feedContext.tsx\";\nimport React from 'react';\nimport { useStorageReducer } from 'react-storage-hooks';\nconst FeedContext = React.createContext(undefined);\nconst FeedDispatchContext = React.createContext(undefined);\n\nfunction feedReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      {\n        return {\n          feeds: [...state.feeds, action.payload.feed]\n        };\n      }\n\n    case 'remove':\n      {\n        return {\n          feeds: state.feeds.filter(p => p.id !== action.payload.feed.id)\n        };\n      }\n\n    case 'update':\n      {\n        const {\n          feed\n        } = action.payload;\n        return {\n          feeds: state.feeds.map(f => {\n            if (f.id === feed.id) return feed;\n            return f;\n          })\n        };\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${action}`);\n      }\n  }\n}\n\nfunction FeedProvider({\n  children\n}) {\n  // This persists the state to local storage\n  const [state, dispatch] = useStorageReducer(localStorage, 'FEED_LIST', feedReducer, {\n    feeds: []\n  });\n  return /*#__PURE__*/React.createElement(FeedContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FeedDispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, children));\n}\n\nfunction useFeedState() {\n  const context = React.useContext(FeedContext);\n\n  if (context === undefined) {\n    throw new Error('useContactListState must be used within a FeedProvider');\n  }\n\n  return context;\n}\n\nfunction useFeedDispatch() {\n  const context = React.useContext(FeedDispatchContext);\n\n  if (context === undefined) {\n    throw new Error('useFeedState must be used within a FeedProvider');\n  }\n\n  return context;\n}\n\nexport { FeedProvider, useFeedState, useFeedDispatch };","map":{"version":3,"sources":["/home/snuc/dev/presentable-projects/dayfeed/app/src/state/feedContext.tsx"],"names":["React","useStorageReducer","FeedContext","createContext","undefined","FeedDispatchContext","feedReducer","state","action","type","feeds","payload","feed","filter","p","id","map","f","Error","FeedProvider","children","dispatch","localStorage","useFeedState","context","useContext","useFeedDispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,MAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,CAAuCC,SAAvC,CAApB;AACA,MAAMC,mBAAmB,GAAGL,KAAK,CAACG,aAAN,CAA0CC,SAA1C,CAA5B;;AAGA,SAASE,WAAT,CAAqBC,KAArB,EAAmCC,MAAnC,EAAmD;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,KAAL;AAAY;AACR,eAAO;AAAEC,UAAAA,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAiBF,MAAM,CAACG,OAAP,CAAeC,IAAhC;AAAT,SAAP;AACH;;AACD,SAAK,QAAL;AAAe;AACX,eAAO;AAACF,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYG,MAAZ,CAAmBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASP,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBG,EAArD;AAAR,SAAP;AACH;;AACD,SAAK,QAAL;AAAe;AACX,cAAM;AAAEH,UAAAA;AAAF,YAAWJ,MAAM,CAACG,OAAxB;AAEA,eAAO;AACHD,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYM,GAAZ,CAAgBC,CAAC,IAAI;AACpB,gBAAIA,CAAC,CAACF,EAAF,KAASH,IAAI,CAACG,EAAlB,EAAsB,OAAOH,IAAP;AACtB,mBAAOK,CAAP;AACH,WAHE;AADJ,SAAP;AAOH;;AACD;AAAS;AACL,cAAM,IAAIC,KAAJ,CAAW,0BAAyBV,MAAO,EAA3C,CAAN;AACH;AApBL;AAsBH;;AAED,SAASW,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAqD;AACjD;AACA,QAAM,CAACb,KAAD,EAAQc,QAAR,IAAoBpB,iBAAiB,CAACqB,YAAD,EAAe,WAAf,EAA4BhB,WAA5B,EAAyC;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAAzC,CAA3C;AAEA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEH,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEc,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QADL,CADJ,CADJ;AAOH;;AAGD,SAASG,YAAT,GAAwB;AACpB,QAAMC,OAAO,GAAGxB,KAAK,CAACyB,UAAN,CAAiBvB,WAAjB,CAAhB;;AAEA,MAAIsB,OAAO,KAAKpB,SAAhB,EAA2B;AACvB,UAAM,IAAIc,KAAJ,CAAU,wDAAV,CAAN;AACH;;AAED,SAAOM,OAAP;AACH;;AAGD,SAASE,eAAT,GAA2B;AACvB,QAAMF,OAAO,GAAGxB,KAAK,CAACyB,UAAN,CAAiBpB,mBAAjB,CAAhB;;AAEA,MAAImB,OAAO,KAAKpB,SAAhB,EAA2B;AACvB,UAAM,IAAIc,KAAJ,CAAU,iDAAV,CAAN;AACH;;AAED,SAAOM,OAAP;AACH;;AAED,SAASL,YAAT,EAAuBI,YAAvB,EAAqCG,eAArC","sourcesContent":["import React from 'react';\nimport { useStorageReducer } from 'react-storage-hooks';\nimport { NewsFeed } from '../lib/client/types';\n\n/**\n * This is how we manage the global state of the contact list. If you're familiar with Redux, this is similar, just without all the boilerplate.\n * https://kentcdodds.com/blog/how-to-use-react-context-effectively/\n * \n * This is an excellent article on React Context. \n */\n\ntype Action = {type: 'add', payload: {feed: NewsFeed}} | {type: 'remove', payload: {feed: NewsFeed}} | {type: 'update', payload: {feed: NewsFeed}};\ntype Dispatch = (action: Action) => void;\ntype State = {feeds: NewsFeed[]};\ntype FeedProviderProps = {children: React.ReactNode};\n\nconst FeedContext = React.createContext<State | undefined>(undefined);\nconst FeedDispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\n\nfunction feedReducer(state: State, action: Action) {\n    switch (action.type) {\n        case 'add': {\n            return { feeds: [...state.feeds, action.payload.feed]};\n        }\n        case 'remove': {\n            return {feeds: state.feeds.filter(p => p.id !== action.payload.feed.id)}\n        }\n        case 'update': {\n            const { feed } = action.payload;\n\n            return { \n                feeds: state.feeds.map(f => {\n                        if (f.id === feed.id) return feed;\n                        return f;\n                    }\n                )\n            }\n        }\n        default: {\n            throw new Error(`Unhandled action type: ${action}`);\n        }\n    }\n}\n\nfunction FeedProvider({children}: FeedProviderProps) {\n    // This persists the state to local storage\n    const [state, dispatch] = useStorageReducer(localStorage, 'FEED_LIST', feedReducer, { feeds: [] });\n    \n    return (\n        <FeedContext.Provider value={state}>\n            <FeedDispatchContext.Provider value={dispatch}>\n                {children}\n            </FeedDispatchContext.Provider>\n        </FeedContext.Provider>\n    )\n}\n\n\nfunction useFeedState() {\n    const context = React.useContext(FeedContext);\n\n    if (context === undefined) {\n        throw new Error('useContactListState must be used within a FeedProvider');\n    }\n\n    return context;\n}\n\n\nfunction useFeedDispatch() {\n    const context = React.useContext(FeedDispatchContext);\n\n    if (context === undefined) {\n        throw new Error('useFeedState must be used within a FeedProvider');\n    }\n\n    return context;\n}\n\nexport { FeedProvider, useFeedState, useFeedDispatch }"]},"metadata":{},"sourceType":"module"}