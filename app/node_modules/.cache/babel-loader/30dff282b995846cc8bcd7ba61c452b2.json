{"ast":null,"code":"var _jsxFileName = \"/home/snuc/dev/presentable-projects/dayfeed/app/src/connector/organisms/news-feed/NewsFeed.tsx\";\nimport React from 'react';\nimport getNewsService from '../../../api/news';\nimport DisconnectedNewsFeed from '../../../components/organisms/news-feed/NewsFeed';\nimport { useFeedState } from '../../../state/feedContext';\nimport Select from 'react-select';\n\nconst NewsFeed = () => {\n  const [articles, setArticles] = React.useState([]);\n  const [error, setError] = React.useState(undefined);\n  const {\n    feeds\n  } = useFeedState();\n  const [selectedFeed, setSelected] = React.useState(0);\n  React.useEffect(() => {\n    async function fetchFeed() {\n      let newsSerivce = getNewsService();\n      let feed = feeds[selectedFeed];\n      if (!feed) return;\n      let query = {\n        requiredKeywords: feed.includedKeywords,\n        optionalKeywords: feed.optionalKeywords,\n        excludedKeywords: feed.excludedKeywords,\n        category: feed.topic ? feed.topic : undefined,\n        language: feed.language ? feed.language : undefined,\n        country: feed.country ? feed.country : undefined,\n        sources: feed.sources.map(s => s.id)\n      };\n      newsSerivce.searchTopHeadlines(query, 30, 1).then(res => setArticles(res.articles.map(a => {\n        var _a$source, _a$source2;\n\n        console.log(a.urlToImage);\n        return {\n          title: a.title ? a.title : 'Failed to load title',\n          id: a.url ? a.url : '',\n          description: a.description ? a.description : 'No description provided.',\n          imageUrl: a.urlToImage && a.urlToImage !== 'null' ? a.urlToImage : 'https://k12cit.com/assets/images/missing.png',\n          articleUrl: a.url ? a.url : '',\n          sourceName: ((_a$source = a.source) === null || _a$source === void 0 ? void 0 : _a$source.name) ? (_a$source2 = a.source) === null || _a$source2 === void 0 ? void 0 : _a$source2.name : 'Unknown source'\n        };\n      }))).catch(error => {\n        console.log(error);\n        setError('Failed to fetch feed.');\n      });\n    }\n\n    fetchFeed();\n  }, [selectedFeed, feeds]);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, error);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, feeds.length !== 0 && /*#__PURE__*/React.createElement(Select, {\n    value: {\n      label: feeds[selectedFeed].name,\n      value: selectedFeed\n    },\n    options: feeds.map((f, i) => {\n      return {\n        label: f.name,\n        value: i\n      };\n    }),\n    onChange: s => setSelected(s.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(DisconnectedNewsFeed, {\n    articles: articles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default NewsFeed;","map":{"version":3,"sources":["/home/snuc/dev/presentable-projects/dayfeed/app/src/connector/organisms/news-feed/NewsFeed.tsx"],"names":["React","getNewsService","DisconnectedNewsFeed","useFeedState","Select","NewsFeed","articles","setArticles","useState","error","setError","undefined","feeds","selectedFeed","setSelected","useEffect","fetchFeed","newsSerivce","feed","query","requiredKeywords","includedKeywords","optionalKeywords","excludedKeywords","category","topic","language","country","sources","map","s","id","searchTopHeadlines","then","res","a","console","log","urlToImage","title","url","description","imageUrl","articleUrl","sourceName","source","name","catch","length","label","value","f","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport getNewsService from '../../../api/news';\nimport { Category, Language, HeadlineQuery, HeadlineCountry } from '../../../lib/api/types';\nimport { NewsArticle } from '../../../lib/client/types';\nimport DisconnectedNewsFeed from '../../../components/organisms/news-feed/NewsFeed';\nimport { useFeedState } from '../../../state/feedContext';\nimport Select from 'react-select';\n\n\nconst NewsFeed: React.FC = () => {\n    const [articles, setArticles] = React.useState<NewsArticle[]>([])\n    const [error, setError] = React.useState<string | undefined>(undefined);\n    const { feeds } = useFeedState();\n    const [selectedFeed, setSelected] = React.useState(0);\n\n    React.useEffect(() => {\n        async function fetchFeed() { \n            let newsSerivce = getNewsService();\n            let feed = feeds[selectedFeed];\n            if (!feed) return;\n\n            let query: HeadlineQuery = {\n                requiredKeywords: feed.includedKeywords,\n                optionalKeywords: feed.optionalKeywords,\n                excludedKeywords: feed.excludedKeywords,\n                category: feed.topic ? feed.topic as Category : undefined,\n                language: feed.language ? feed.language as Language : undefined,\n                country: feed.country ? feed.country as HeadlineCountry : undefined,\n                sources: feed.sources.map(s => s.id)\n            }\n            newsSerivce.searchTopHeadlines(query, 30, 1)\n            .then(res => setArticles(\n                res.articles.map(a => {\n                    console.log(a.urlToImage)\n                    return {\n                        title: a.title ? a.title : 'Failed to load title',\n                        id: a.url ? a.url : '',\n                        description: a.description ? a.description : 'No description provided.',\n                        imageUrl: a.urlToImage && a.urlToImage !== 'null' ? a.urlToImage : 'https://k12cit.com/assets/images/missing.png',\n                        articleUrl: a.url ? a.url : '',\n                        sourceName: a.source?.name ? a.source?.name : 'Unknown source'\n                    }\n                })\n            )).catch(error => {console.log(error); setError('Failed to fetch feed.')})\n        }\n\n        fetchFeed()\n    }, [selectedFeed, feeds])\n\n    if (error) {\n        return (\n            <>\n                {error}\n            </>\n        )\n    }\n\n    return (\n        <>\n            {\n                feeds.length !== 0 && \n                <Select value={{label: feeds[selectedFeed].name, value: selectedFeed}}\n                        options={feeds.map((f, i) => {return {label: f.name, value: i}})}\n                        onChange={(s) => setSelected((s as {label: string, value: number}).value)}\n                />\n            }\n            <DisconnectedNewsFeed articles={articles}/>\n        </>\n    )\n}\n\nexport default NewsFeed;"]},"metadata":{},"sourceType":"module"}