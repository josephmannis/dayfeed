{"ast":null,"code":"import _slicedToArray from\"/home/snuc/dev/presentable-projects/dayfeed/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/home/snuc/dev/presentable-projects/dayfeed/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from'react';import{useStorageReducer}from'react-storage-hooks';var FeedContext=React.createContext(undefined);var FeedDispatchContext=React.createContext(undefined);function feedReducer(state,action){switch(action.type){case'add':{return{feeds:[].concat(_toConsumableArray(state.feeds),[action.payload.feed])};}case'remove':{return{feeds:state.feeds.filter(function(p){return p.id!==action.payload.feed.id;})};}case'update':{var feed=action.payload.feed;return{feeds:state.feeds.map(function(f){if(f.id===feed.id)return feed;return f;})};}default:{throw new Error(\"Unhandled action type: \".concat(action));}}}function FeedProvider(_ref){var children=_ref.children;// This persists the state to local storage\nvar _useStorageReducer=useStorageReducer(localStorage,'FEED_LIST',feedReducer,{feeds:[]}),_useStorageReducer2=_slicedToArray(_useStorageReducer,2),state=_useStorageReducer2[0],dispatch=_useStorageReducer2[1];return/*#__PURE__*/React.createElement(FeedContext.Provider,{value:state},/*#__PURE__*/React.createElement(FeedDispatchContext.Provider,{value:dispatch},children));}function useFeedState(){var context=React.useContext(FeedContext);if(context===undefined){throw new Error('useContactListState must be used within a FeedProvider');}return context;}function useFeedDispatch(){var context=React.useContext(FeedDispatchContext);if(context===undefined){throw new Error('useFeedState must be used within a FeedProvider');}return context;}export{FeedProvider,useFeedState,useFeedDispatch};","map":{"version":3,"sources":["/home/snuc/dev/presentable-projects/dayfeed/app/src/state/feedContext.tsx"],"names":["React","useStorageReducer","FeedContext","createContext","undefined","FeedDispatchContext","feedReducer","state","action","type","feeds","payload","feed","filter","p","id","map","f","Error","FeedProvider","children","localStorage","dispatch","useFeedState","context","useContext","useFeedDispatch"],"mappings":"4QAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,iBAAT,KAAkC,qBAAlC,CAeA,GAAMC,CAAAA,WAAW,CAAGF,KAAK,CAACG,aAAN,CAAuCC,SAAvC,CAApB,CACA,GAAMC,CAAAA,mBAAmB,CAAGL,KAAK,CAACG,aAAN,CAA0CC,SAA1C,CAA5B,CAGA,QAASE,CAAAA,WAAT,CAAqBC,KAArB,CAAmCC,MAAnC,CAAmD,CAC/C,OAAQA,MAAM,CAACC,IAAf,EACI,IAAK,KAAL,CAAY,CACR,MAAO,CAAEC,KAAK,8BAAMH,KAAK,CAACG,KAAZ,GAAmBF,MAAM,CAACG,OAAP,CAAeC,IAAlC,EAAP,CAAP,CACH,CACD,IAAK,QAAL,CAAe,CACX,MAAO,CAACF,KAAK,CAAEH,KAAK,CAACG,KAAN,CAAYG,MAAZ,CAAmB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,EAAF,GAASP,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBG,EAAjC,EAApB,CAAR,CAAP,CACH,CACD,IAAK,QAAL,CAAe,IACHH,CAAAA,IADG,CACMJ,MAAM,CAACG,OADb,CACHC,IADG,CAGX,MAAO,CACHF,KAAK,CAAEH,KAAK,CAACG,KAAN,CAAYM,GAAZ,CAAgB,SAAAC,CAAC,CAAI,CACpB,GAAIA,CAAC,CAACF,EAAF,GAASH,IAAI,CAACG,EAAlB,CAAsB,MAAOH,CAAAA,IAAP,CACtB,MAAOK,CAAAA,CAAP,CACH,CAHE,CADJ,CAAP,CAOH,CACD,QAAS,CACL,KAAM,IAAIC,CAAAA,KAAJ,kCAAoCV,MAApC,EAAN,CACH,CApBL,CAsBH,CAED,QAASW,CAAAA,YAAT,MAAqD,IAA9BC,CAAAA,QAA8B,MAA9BA,QAA8B,CACjD;AADiD,uBAEvBnB,iBAAiB,CAACoB,YAAD,CAAe,WAAf,CAA4Bf,WAA5B,CAAyC,CAAEI,KAAK,CAAE,EAAT,CAAzC,CAFM,0DAE1CH,KAF0C,wBAEnCe,QAFmC,wBAIjD,mBACI,oBAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAEf,KAA7B,eACI,oBAAC,mBAAD,CAAqB,QAArB,EAA8B,KAAK,CAAEe,QAArC,EACKF,QADL,CADJ,CADJ,CAOH,CAGD,QAASG,CAAAA,YAAT,EAAwB,CACpB,GAAMC,CAAAA,OAAO,CAAGxB,KAAK,CAACyB,UAAN,CAAiBvB,WAAjB,CAAhB,CAEA,GAAIsB,OAAO,GAAKpB,SAAhB,CAA2B,CACvB,KAAM,IAAIc,CAAAA,KAAJ,CAAU,wDAAV,CAAN,CACH,CAED,MAAOM,CAAAA,OAAP,CACH,CAGD,QAASE,CAAAA,eAAT,EAA2B,CACvB,GAAMF,CAAAA,OAAO,CAAGxB,KAAK,CAACyB,UAAN,CAAiBpB,mBAAjB,CAAhB,CAEA,GAAImB,OAAO,GAAKpB,SAAhB,CAA2B,CACvB,KAAM,IAAIc,CAAAA,KAAJ,CAAU,iDAAV,CAAN,CACH,CAED,MAAOM,CAAAA,OAAP,CACH,CAED,OAASL,YAAT,CAAuBI,YAAvB,CAAqCG,eAArC","sourcesContent":["import React from 'react';\nimport { useStorageReducer } from 'react-storage-hooks';\nimport { NewsFeed } from '../lib/client/types';\n\n/**\n * This is how we manage the global state of the contact list. If you're familiar with Redux, this is similar, just without all the boilerplate.\n * https://kentcdodds.com/blog/how-to-use-react-context-effectively/\n * \n * This is an excellent article on React Context. \n */\n\ntype Action = {type: 'add', payload: {feed: NewsFeed}} | {type: 'remove', payload: {feed: NewsFeed}} | {type: 'update', payload: {feed: NewsFeed}};\ntype Dispatch = (action: Action) => void;\ntype State = {feeds: NewsFeed[]};\ntype FeedProviderProps = {children: React.ReactNode};\n\nconst FeedContext = React.createContext<State | undefined>(undefined);\nconst FeedDispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\n\nfunction feedReducer(state: State, action: Action) {\n    switch (action.type) {\n        case 'add': {\n            return { feeds: [...state.feeds, action.payload.feed]};\n        }\n        case 'remove': {\n            return {feeds: state.feeds.filter(p => p.id !== action.payload.feed.id)}\n        }\n        case 'update': {\n            const { feed } = action.payload;\n\n            return { \n                feeds: state.feeds.map(f => {\n                        if (f.id === feed.id) return feed;\n                        return f;\n                    }\n                )\n            }\n        }\n        default: {\n            throw new Error(`Unhandled action type: ${action}`);\n        }\n    }\n}\n\nfunction FeedProvider({children}: FeedProviderProps) {\n    // This persists the state to local storage\n    const [state, dispatch] = useStorageReducer(localStorage, 'FEED_LIST', feedReducer, { feeds: [] });\n    \n    return (\n        <FeedContext.Provider value={state}>\n            <FeedDispatchContext.Provider value={dispatch}>\n                {children}\n            </FeedDispatchContext.Provider>\n        </FeedContext.Provider>\n    )\n}\n\n\nfunction useFeedState() {\n    const context = React.useContext(FeedContext);\n\n    if (context === undefined) {\n        throw new Error('useContactListState must be used within a FeedProvider');\n    }\n\n    return context;\n}\n\n\nfunction useFeedDispatch() {\n    const context = React.useContext(FeedDispatchContext);\n\n    if (context === undefined) {\n        throw new Error('useFeedState must be used within a FeedProvider');\n    }\n\n    return context;\n}\n\nexport { FeedProvider, useFeedState, useFeedDispatch }"]},"metadata":{},"sourceType":"module"}