{"ast":null,"code":"var _jsxFileName = \"/home/snuc/dev/presentable-projects/dayfeed/app/src/components/organisms/feed-editor/FeedEditor.tsx\";\nimport React from 'react';\nimport { Editor, Header, EditorInput, NameInput } from './styled';\nimport { TextButton } from '../../atoms/button/Button';\nimport EditorSection from '../../molecules/editor-section/EditorSection';\nimport { CopyProvider } from '../../../strings/strings';\nimport CreatableSelect from 'react-select/creatable';\nimport makeAnimated from 'react-select/animated';\nimport Select from 'react-select';\n\nconst FeedEditor = props => {\n  const {\n    feed,\n    onFeedDeleted,\n    sourceOptions,\n    countryOptions,\n    languageOptions,\n    topicOptions,\n    onFeedChanged\n  } = props;\n\n  const setRequired = keywords => {\n    updateFeed({ ...feed,\n      includedKeywords: keywords\n    });\n  };\n\n  const setOptional = keywords => {\n    updateFeed({ ...feed,\n      optionalKeywords: keywords\n    });\n  };\n\n  const setExcluded = keywords => {\n    updateFeed({ ...feed,\n      excludedKeywords: keywords\n    });\n  };\n\n  const setSources = sources => {\n    updateFeed({ ...feed,\n      sources: sources\n    });\n  };\n\n  const setTopic = topic => updateAndResetSources('topic', topic);\n\n  const setCountry = country => updateAndResetSources('country', country);\n\n  const setLanguage = language => updateAndResetSources('language', language);\n\n  const setFeedname = name => {\n    updateFeed({ ...feed,\n      name: name\n    });\n  };\n\n  const updateAndResetSources = (feedField, selectItem) => {\n    let value = selectItem ? selectItem.value : undefined;\n    let updated = { ...feed,\n      sources: value !== feed[feedField] ? [] : feed.sources\n    };\n    updated[feedField] = value;\n    updateFeed(updated);\n  };\n\n  const updateFeed = feed => onFeedChanged(feed);\n\n  const getValues = options => options ? options.map(o => o.value) : [];\n\n  const getSelected = options => options ? options.map(o => {\n    return {\n      label: o,\n      value: o\n    };\n  }) : [];\n\n  const toSelected = option => {\n    return {\n      label: option,\n      value: option\n    };\n  };\n\n  const animatedComponents = makeAnimated();\n\n  const sourcesToSelects = sources => sources.map(s => {\n    return {\n      label: s.name,\n      value: s.id\n    };\n  });\n\n  const selectStyleAttrs = {\n    components: {\n      DropdownIndicator: () => null,\n      IndicatorSeparator: () => null,\n      ...makeAnimated()\n    }\n  };\n  return /*#__PURE__*/React.createElement(Editor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(NameInput, {\n    value: feed.name,\n    onChange: e => setFeedname(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextButton, {\n    onClick: () => onFeedDeleted(feed),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, `ðŸ—‘  Delete Feed`)), /*#__PURE__*/React.createElement(EditorSection, {\n    title: CopyProvider.EDITOR_KEYWORDS_SECTION_TITLE,\n    body: CopyProvider.EDITOR_KEYWORDS_SECTION_BODY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(EditorInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, \"Required\"), /*#__PURE__*/React.createElement(CreatableSelect, Object.assign({}, selectStyleAttrs, {\n    value: getSelected(feed.includedKeywords),\n    isMulti: true,\n    onChange: s => setRequired(getValues(s)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(EditorInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, \"Optional\"), /*#__PURE__*/React.createElement(CreatableSelect, Object.assign({}, selectStyleAttrs, {\n    value: getSelected(feed.optionalKeywords),\n    isMulti: true,\n    onChange: s => setOptional(getValues(s)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(EditorInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }, \"Excluded\"), /*#__PURE__*/React.createElement(CreatableSelect, Object.assign({}, selectStyleAttrs, {\n    value: getSelected(feed.excludedKeywords),\n    isMulti: true,\n    onChange: s => setExcluded(getValues(s)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  })))), /*#__PURE__*/React.createElement(EditorSection, {\n    title: CopyProvider.EDITOR_CONTENT_SECTION_TITLE,\n    body: CopyProvider.EDITOR_CONTENT_SECTION_BODY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(EditorInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, \"Sources\"), /*#__PURE__*/React.createElement(Select, {\n    isMulti: true,\n    components: animatedComponents,\n    options: sourcesToSelects(sourceOptions),\n    value: sourcesToSelects(feed.sources),\n    onChange: s => setSources(s ? s.map(select => {\n      return {\n        name: select.label,\n        id: select.value\n      };\n    }) : []),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(EditorInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, \"Topic\"), /*#__PURE__*/React.createElement(Select, {\n    isClearable: true,\n    options: getSelected(topicOptions),\n    value: toSelected(feed.topic),\n    onChange: s => setTopic(s),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(EditorSection, {\n    title: CopyProvider.EDITOR_LOCALE_SECTION_TITLE,\n    body: CopyProvider.EDITOR_LOCALE_SECTION_BODY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(EditorInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }, \"Country\"), /*#__PURE__*/React.createElement(Select, {\n    isClearable: true,\n    options: getSelected(countryOptions),\n    value: toSelected(feed.country),\n    onChange: s => setCountry(s),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(EditorInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, \"Language\"), /*#__PURE__*/React.createElement(Select, {\n    isClearable: true,\n    options: getSelected(languageOptions),\n    value: toSelected(feed.language),\n    onChange: s => setLanguage(s),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default FeedEditor;","map":{"version":3,"sources":["/home/snuc/dev/presentable-projects/dayfeed/app/src/components/organisms/feed-editor/FeedEditor.tsx"],"names":["React","Editor","Header","EditorInput","NameInput","TextButton","EditorSection","CopyProvider","CreatableSelect","makeAnimated","Select","FeedEditor","props","feed","onFeedDeleted","sourceOptions","countryOptions","languageOptions","topicOptions","onFeedChanged","setRequired","keywords","updateFeed","includedKeywords","setOptional","optionalKeywords","setExcluded","excludedKeywords","setSources","sources","setTopic","topic","updateAndResetSources","setCountry","country","setLanguage","language","setFeedname","name","feedField","selectItem","value","undefined","updated","getValues","options","map","o","getSelected","label","toSelected","option","animatedComponents","sourcesToSelects","s","id","selectStyleAttrs","components","DropdownIndicator","IndicatorSeparator","e","target","EDITOR_KEYWORDS_SECTION_TITLE","EDITOR_KEYWORDS_SECTION_BODY","EDITOR_CONTENT_SECTION_TITLE","EDITOR_CONTENT_SECTION_BODY","select","EDITOR_LOCALE_SECTION_TITLE","EDITOR_LOCALE_SECTION_BODY"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NewsFeed, NewsSource, Selected } from '../../../lib/client/types';\nimport { Editor, Header, EditorInput, NameInput } from './styled';\nimport { TextButton } from '../../atoms/button/Button';\nimport EditorSection from '../../molecules/editor-section/EditorSection';\nimport { CopyProvider } from '../../../strings/strings';\nimport CreatableSelect from 'react-select/creatable';\nimport makeAnimated from 'react-select/animated';\nimport Select from 'react-select';\n\ninterface IFeedEditorFormProps {\n    feed: NewsFeed;\n    sourceOptions: NewsSource[];\n    countryOptions: string[];\n    languageOptions: string[];\n    topicOptions: string[];\n    onFeedChanged: (feed: NewsFeed) => void;\n    onFeedDeleted: (feed: NewsFeed) => void;\n}\n\nconst FeedEditor: React.FC<IFeedEditorFormProps> = props => {    \n    const {feed, onFeedDeleted, sourceOptions, countryOptions, languageOptions, topicOptions, onFeedChanged} = props;\n\n    const setRequired = (keywords: string[]) => {\n        updateFeed({\n            ...feed,\n            includedKeywords: keywords\n        })\n    }\n    const setOptional = (keywords: string[]) => {\n        updateFeed({\n            ...feed,\n            optionalKeywords: keywords\n        })\n    }\n    const setExcluded = (keywords: string[]) => {\n        updateFeed({\n            ...feed,\n            excludedKeywords: keywords\n        })\n    }\n    const setSources = (sources: NewsSource[]) => {\n        updateFeed({\n            ...feed,\n            sources: sources\n        })\n    }\n    const setTopic = (topic: Selected | null) => updateAndResetSources('topic', topic)\n    const setCountry = (country: Selected | null) => updateAndResetSources('country', country)\n    const setLanguage = (language: Selected | null) => updateAndResetSources('language', language)\n    const setFeedname = (name: string) => {\n        updateFeed({\n            ...feed,\n            name: name\n        })\n    }\n\n    const updateAndResetSources = <T extends keyof Pick<NewsFeed, 'country' | 'topic' | 'language'>>(feedField: T, selectItem: Selected | null) => {\n        let value = selectItem ? selectItem.value : undefined\n        let updated = {\n            ...feed,\n            sources: value !== feed[feedField] ? [] : feed.sources\n        }\n\n        updated[feedField] = value\n\n        updateFeed(updated)\n    }\n\n    const updateFeed = (feed: NewsFeed) => onFeedChanged(feed)\n\n    const getValues = (options?: Selected[]) => options ? options.map(o => o.value) : [];\n    const getSelected = (options?: string[]) => options ? options.map(o => {return {label: o, value: o}}) : []\n    const toSelected = (option?: string) => { return { label: option, value: option } }\n    const animatedComponents = makeAnimated();\n\n    const sourcesToSelects = (sources: NewsSource[]) => sources.map(s => { return {label: s.name, value: s.id} }) \n    const selectStyleAttrs = {\n        components: { \n            DropdownIndicator:() => null, \n            IndicatorSeparator:() => null,\n            ...makeAnimated()\n        }\n    }\n\n    return (\n        <Editor>\n            <Header>\n                <NameInput value={feed.name} onChange={(e) => setFeedname(e.target.value)}/>\n                <TextButton onClick={() => onFeedDeleted(feed)}>{`ðŸ—‘  Delete Feed`}</TextButton>\n            </Header>\n            <EditorSection title={CopyProvider.EDITOR_KEYWORDS_SECTION_TITLE} body={CopyProvider.EDITOR_KEYWORDS_SECTION_BODY}>\n                <EditorInput>\n                    <h4>Required</h4>\n                    <CreatableSelect {...selectStyleAttrs} value={getSelected(feed.includedKeywords)} isMulti onChange={(s) => setRequired(getValues(s as Selected[]))}/>\n                </EditorInput>\n                \n                <EditorInput>\n                    <h4>Optional</h4>\n                    <CreatableSelect {...selectStyleAttrs} value={getSelected(feed.optionalKeywords)} isMulti onChange={(s) => setOptional(getValues(s as Selected[]))}/>\n                </EditorInput>\n\n                <EditorInput>\n                    <h4>Excluded</h4>\n                    <CreatableSelect {...selectStyleAttrs} value={getSelected(feed.excludedKeywords)} isMulti onChange={(s) => setExcluded(getValues(s as Selected[]))}/>\n                </EditorInput>\n            </EditorSection>\n            <EditorSection title={CopyProvider.EDITOR_CONTENT_SECTION_TITLE} body={CopyProvider.EDITOR_CONTENT_SECTION_BODY}>\n                <EditorInput>\n                    <h4>Sources</h4>\n                    <Select isMulti components={animatedComponents} options={sourcesToSelects(sourceOptions)} value={sourcesToSelects(feed.sources)} onChange={(s) => setSources((s as Selected[]) ? (s as Selected[]).map(select => { return {name: select.label, id: select.value} }) : [])}/>\n                </EditorInput>\n\n                <EditorInput>\n                    <h4>Topic</h4>\n                    <Select isClearable options={getSelected(topicOptions)} value={toSelected(feed.topic)} onChange={(s) => setTopic((s as Selected))}/>\n                </EditorInput>\n            </EditorSection>\n            <EditorSection title={CopyProvider.EDITOR_LOCALE_SECTION_TITLE} body={CopyProvider.EDITOR_LOCALE_SECTION_BODY}> \n                <EditorInput>\n                    <h4>Country</h4>\n                    <Select isClearable options={getSelected(countryOptions)} value={toSelected(feed.country)} onChange={(s) => setCountry((s as Selected))}/>\n                </EditorInput>\n\n                <EditorInput>\n                    <h4>Language</h4>\n                    <Select isClearable options={getSelected(languageOptions)} value={toSelected(feed.language)} onChange={(s) => setLanguage((s as Selected))}/>\n                </EditorInput>\n            </EditorSection>\n        </Editor>\n    )\n}\n\nexport default FeedEditor;"]},"metadata":{},"sourceType":"module"}