{"ast":null,"code":"import _objectSpread from\"/home/snuc/dev/presentable-projects/dayfeed/app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import{Editor,Header,EditorInput,NameInput}from'./styled';import{TextButton}from'../../atoms/button/Button';import EditorSection from'../../molecules/editor-section/EditorSection';import{CopyProvider}from'../../../strings/strings';import CreatableSelect from'react-select/creatable';import makeAnimated from'react-select/animated';import Select from'react-select';var FeedEditor=function FeedEditor(props){var feed=props.feed,onFeedDeleted=props.onFeedDeleted,sourceOptions=props.sourceOptions,countryOptions=props.countryOptions,languageOptions=props.languageOptions,topicOptions=props.topicOptions,onFeedChanged=props.onFeedChanged;var setRequired=function setRequired(keywords){updateFeed(_objectSpread({},feed,{includedKeywords:keywords}));};var setOptional=function setOptional(keywords){updateFeed(_objectSpread({},feed,{optionalKeywords:keywords}));};var setExcluded=function setExcluded(keywords){updateFeed(_objectSpread({},feed,{excludedKeywords:keywords}));};var setSources=function setSources(sources){updateFeed(_objectSpread({},feed,{sources:sources}));};var setTopic=function setTopic(topic){return updateAndResetSources('topic',topic);};var setCountry=function setCountry(country){return updateAndResetSources('country',country);};var setLanguage=function setLanguage(language){return updateAndResetSources('language',language);};var setFeedname=function setFeedname(name){updateFeed(_objectSpread({},feed,{name:name}));};var updateAndResetSources=function updateAndResetSources(feedField,selectItem){var value=selectItem?selectItem.value:undefined;var updated=_objectSpread({},feed,{sources:value!==feed[feedField]?[]:feed.sources});updated[feedField]=value;updateFeed(updated);};var updateFeed=function updateFeed(feed){return onFeedChanged(feed);};var getValues=function getValues(options){return options?options.map(function(o){return o.value;}):[];};var getSelected=function getSelected(options){return options?options.map(function(o){return{label:o,value:o};}):[];};var toSelected=function toSelected(option){return{label:option,value:option};};var animatedComponents=makeAnimated();var sourcesToSelects=function sourcesToSelects(sources){return sources.map(function(s){return{label:s.name,value:s.id};});};var selectStyleAttrs={components:_objectSpread({DropdownIndicator:function DropdownIndicator(){return null;},IndicatorSeparator:function IndicatorSeparator(){return null;}},makeAnimated())};return/*#__PURE__*/React.createElement(Editor,null,/*#__PURE__*/React.createElement(Header,null,/*#__PURE__*/React.createElement(NameInput,{value:feed.name,onChange:function onChange(e){return setFeedname(e.target.value);}}),/*#__PURE__*/React.createElement(TextButton,{onClick:function onClick(){return onFeedDeleted(feed);}},\"\\uD83D\\uDDD1  Delete Feed\")),/*#__PURE__*/React.createElement(EditorSection,{title:CopyProvider.EDITOR_KEYWORDS_SECTION_TITLE,body:CopyProvider.EDITOR_KEYWORDS_SECTION_BODY},/*#__PURE__*/React.createElement(EditorInput,null,/*#__PURE__*/React.createElement(\"h4\",null,\"Required\"),/*#__PURE__*/React.createElement(CreatableSelect,Object.assign({},selectStyleAttrs,{value:getSelected(feed.includedKeywords),isMulti:true,onChange:function onChange(s){return setRequired(getValues(s));}}))),/*#__PURE__*/React.createElement(EditorInput,null,/*#__PURE__*/React.createElement(\"h4\",null,\"Optional\"),/*#__PURE__*/React.createElement(CreatableSelect,Object.assign({},selectStyleAttrs,{value:getSelected(feed.optionalKeywords),isMulti:true,onChange:function onChange(s){return setOptional(getValues(s));}}))),/*#__PURE__*/React.createElement(EditorInput,null,/*#__PURE__*/React.createElement(\"h4\",null,\"Excluded\"),/*#__PURE__*/React.createElement(CreatableSelect,Object.assign({},selectStyleAttrs,{value:getSelected(feed.excludedKeywords),isMulti:true,onChange:function onChange(s){return setExcluded(getValues(s));}})))),/*#__PURE__*/React.createElement(EditorSection,{title:CopyProvider.EDITOR_CONTENT_SECTION_TITLE,body:CopyProvider.EDITOR_CONTENT_SECTION_BODY},/*#__PURE__*/React.createElement(EditorInput,null,/*#__PURE__*/React.createElement(\"h4\",null,\"Sources\"),/*#__PURE__*/React.createElement(Select,{isMulti:true,components:animatedComponents,options:sourcesToSelects(sourceOptions),value:sourcesToSelects(feed.sources),onChange:function onChange(s){return setSources(s?s.map(function(select){return{name:select.label,id:select.value};}):[]);}})),/*#__PURE__*/React.createElement(EditorInput,null,/*#__PURE__*/React.createElement(\"h4\",null,\"Topic\"),/*#__PURE__*/React.createElement(Select,{isClearable:true,options:getSelected(topicOptions),value:toSelected(feed.topic),onChange:function onChange(s){return setTopic(s);}}))),/*#__PURE__*/React.createElement(EditorSection,{title:CopyProvider.EDITOR_LOCALE_SECTION_TITLE,body:CopyProvider.EDITOR_LOCALE_SECTION_BODY},/*#__PURE__*/React.createElement(EditorInput,null,/*#__PURE__*/React.createElement(\"h4\",null,\"Country\"),/*#__PURE__*/React.createElement(Select,{isClearable:true,options:getSelected(countryOptions),value:toSelected(feed.country),onChange:function onChange(s){return setCountry(s);}})),/*#__PURE__*/React.createElement(EditorInput,null,/*#__PURE__*/React.createElement(\"h4\",null,\"Language\"),/*#__PURE__*/React.createElement(Select,{isClearable:true,options:getSelected(languageOptions),value:toSelected(feed.language),onChange:function onChange(s){return setLanguage(s);}}))));};export default FeedEditor;","map":{"version":3,"sources":["/home/snuc/dev/presentable-projects/dayfeed/app/src/components/organisms/feed-editor/FeedEditor.tsx"],"names":["React","Editor","Header","EditorInput","NameInput","TextButton","EditorSection","CopyProvider","CreatableSelect","makeAnimated","Select","FeedEditor","props","feed","onFeedDeleted","sourceOptions","countryOptions","languageOptions","topicOptions","onFeedChanged","setRequired","keywords","updateFeed","includedKeywords","setOptional","optionalKeywords","setExcluded","excludedKeywords","setSources","sources","setTopic","topic","updateAndResetSources","setCountry","country","setLanguage","language","setFeedname","name","feedField","selectItem","value","undefined","updated","getValues","options","map","o","getSelected","label","toSelected","option","animatedComponents","sourcesToSelects","s","id","selectStyleAttrs","components","DropdownIndicator","IndicatorSeparator","e","target","EDITOR_KEYWORDS_SECTION_TITLE","EDITOR_KEYWORDS_SECTION_BODY","EDITOR_CONTENT_SECTION_TITLE","EDITOR_CONTENT_SECTION_BODY","select","EDITOR_LOCALE_SECTION_TITLE","EDITOR_LOCALE_SECTION_BODY"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NewsFeed, NewsSource, Selected } from '../../../lib/client/types';\nimport { Editor, Header, EditorInput, NameInput } from './styled';\nimport { TextButton } from '../../atoms/button/Button';\nimport EditorSection from '../../molecules/editor-section/EditorSection';\nimport { CopyProvider } from '../../../strings/strings';\nimport CreatableSelect from 'react-select/creatable';\nimport makeAnimated from 'react-select/animated';\nimport Select from 'react-select';\n\ninterface IFeedEditorFormProps {\n    feed: NewsFeed;\n    sourceOptions: NewsSource[];\n    countryOptions: string[];\n    languageOptions: string[];\n    topicOptions: string[];\n    onFeedChanged: (feed: NewsFeed) => void;\n    onFeedDeleted: (feed: NewsFeed) => void;\n}\n\nconst FeedEditor: React.FC<IFeedEditorFormProps> = props => {    \n    const {feed, onFeedDeleted, sourceOptions, countryOptions, languageOptions, topicOptions, onFeedChanged} = props;\n\n    const setRequired = (keywords: string[]) => {\n        updateFeed({\n            ...feed,\n            includedKeywords: keywords\n        })\n    }\n    const setOptional = (keywords: string[]) => {\n        updateFeed({\n            ...feed,\n            optionalKeywords: keywords\n        })\n    }\n    const setExcluded = (keywords: string[]) => {\n        updateFeed({\n            ...feed,\n            excludedKeywords: keywords\n        })\n    }\n    const setSources = (sources: NewsSource[]) => {\n        updateFeed({\n            ...feed,\n            sources: sources\n        })\n    }\n    const setTopic = (topic: Selected | null) => updateAndResetSources('topic', topic)\n    const setCountry = (country: Selected | null) => updateAndResetSources('country', country)\n    const setLanguage = (language: Selected | null) => updateAndResetSources('language', language)\n    const setFeedname = (name: string) => {\n        updateFeed({\n            ...feed,\n            name: name\n        })\n    }\n\n    const updateAndResetSources = <T extends keyof Pick<NewsFeed, 'country' | 'topic' | 'language'>>(feedField: T, selectItem: Selected | null) => {\n        let value = selectItem ? selectItem.value : undefined\n        let updated = {\n            ...feed,\n            sources: value !== feed[feedField] ? [] : feed.sources\n        }\n\n        updated[feedField] = value\n\n        updateFeed(updated)\n    }\n\n    const updateFeed = (feed: NewsFeed) => onFeedChanged(feed)\n\n    const getValues = (options?: Selected[]) => options ? options.map(o => o.value) : [];\n    const getSelected = (options?: string[]) => options ? options.map(o => {return {label: o, value: o}}) : []\n    const toSelected = (option?: string) => { return { label: option, value: option } }\n    const animatedComponents = makeAnimated();\n\n    const sourcesToSelects = (sources: NewsSource[]) => sources.map(s => { return {label: s.name, value: s.id} }) \n    const selectStyleAttrs = {\n        components: { \n            DropdownIndicator:() => null, \n            IndicatorSeparator:() => null,\n            ...makeAnimated()\n        }\n    }\n\n    return (\n        <Editor>\n            <Header>\n                <NameInput value={feed.name} onChange={(e) => setFeedname(e.target.value)}/>\n                <TextButton onClick={() => onFeedDeleted(feed)}>{`🗑  Delete Feed`}</TextButton>\n            </Header>\n            <EditorSection title={CopyProvider.EDITOR_KEYWORDS_SECTION_TITLE} body={CopyProvider.EDITOR_KEYWORDS_SECTION_BODY}>\n                <EditorInput>\n                    <h4>Required</h4>\n                    <CreatableSelect {...selectStyleAttrs} value={getSelected(feed.includedKeywords)} isMulti onChange={(s) => setRequired(getValues(s as Selected[]))}/>\n                </EditorInput>\n                \n                <EditorInput>\n                    <h4>Optional</h4>\n                    <CreatableSelect {...selectStyleAttrs} value={getSelected(feed.optionalKeywords)} isMulti onChange={(s) => setOptional(getValues(s as Selected[]))}/>\n                </EditorInput>\n\n                <EditorInput>\n                    <h4>Excluded</h4>\n                    <CreatableSelect {...selectStyleAttrs} value={getSelected(feed.excludedKeywords)} isMulti onChange={(s) => setExcluded(getValues(s as Selected[]))}/>\n                </EditorInput>\n            </EditorSection>\n            <EditorSection title={CopyProvider.EDITOR_CONTENT_SECTION_TITLE} body={CopyProvider.EDITOR_CONTENT_SECTION_BODY}>\n                <EditorInput>\n                    <h4>Sources</h4>\n                    <Select isMulti components={animatedComponents} options={sourcesToSelects(sourceOptions)} value={sourcesToSelects(feed.sources)} onChange={(s) => setSources((s as Selected[]) ? (s as Selected[]).map(select => { return {name: select.label, id: select.value} }) : [])}/>\n                </EditorInput>\n\n                <EditorInput>\n                    <h4>Topic</h4>\n                    <Select isClearable options={getSelected(topicOptions)} value={toSelected(feed.topic)} onChange={(s) => setTopic((s as Selected))}/>\n                </EditorInput>\n            </EditorSection>\n            <EditorSection title={CopyProvider.EDITOR_LOCALE_SECTION_TITLE} body={CopyProvider.EDITOR_LOCALE_SECTION_BODY}> \n                <EditorInput>\n                    <h4>Country</h4>\n                    <Select isClearable options={getSelected(countryOptions)} value={toSelected(feed.country)} onChange={(s) => setCountry((s as Selected))}/>\n                </EditorInput>\n\n                <EditorInput>\n                    <h4>Language</h4>\n                    <Select isClearable options={getSelected(languageOptions)} value={toSelected(feed.language)} onChange={(s) => setLanguage((s as Selected))}/>\n                </EditorInput>\n            </EditorSection>\n        </Editor>\n    )\n}\n\nexport default FeedEditor;"]},"metadata":{},"sourceType":"module"}