{"ast":null,"code":"import _regeneratorRuntime from\"/home/snuc/dev/presentable-projects/dayfeed/app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/snuc/dev/presentable-projects/dayfeed/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/snuc/dev/presentable-projects/dayfeed/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{Editor,Header,EditorPanels,Sidebar,Cell,EditorWrapper,NewFeedButton}from'./styled';import FeedEditor from'../feed-editor/FeedEditor';import{SourceCountryOptions,LanguageOptions,CategoryOptions}from'../../../lib/api/types';import getNewsService from'../../../api/news';import{useFeedState,useFeedDispatch}from'../../../state/feedContext';import{v4}from'uuid';var FeedManager=function FeedManager(props){var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),sources=_React$useState2[0],setSources=_React$useState2[1];var _React$useState3=React.useState(0),_React$useState4=_slicedToArray(_React$useState3,2),selectedFeed=_React$useState4[0],setSelected=_React$useState4[1];var _useFeedState=useFeedState(),feeds=_useFeedState.feeds;var dispatch=useFeedDispatch();React.useEffect(function(){function getSources(){return _getSources.apply(this,arguments);}function _getSources(){_getSources=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var feed,service;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:feed=feeds[selectedFeed];service=getNewsService();service.getSources(feed?feed.topic:undefined,feed?feed.language:undefined,feed?feed.country:undefined).then(function(res){var sources=[];res.forEach(function(s){if(s.id&&s.name)sources.push({name:s.name,id:s.id});});setSources(sources);});case 3:case\"end\":return _context.stop();}}},_callee);}));return _getSources.apply(this,arguments);}getSources();},[selectedFeed,feeds]);var updateFeed=function updateFeed(feed){return dispatch({type:'update',payload:{feed:feed}});};var onFeedAdded=function onFeedAdded(){var newFeed={id:v4(),name:'New Feed',includedKeywords:[],optionalKeywords:[],excludedKeywords:[],sources:[]};dispatch({type:'add',payload:{feed:newFeed}});};var onFeedDeleted=function onFeedDeleted(feed){return dispatch({type:'remove',payload:{feed:feed}});};return/*#__PURE__*/React.createElement(Editor,null,/*#__PURE__*/React.createElement(Header,null,/*#__PURE__*/React.createElement(\"h3\",null,\"Feeds\")),/*#__PURE__*/React.createElement(EditorPanels,null,/*#__PURE__*/React.createElement(Sidebar,null,feeds.map(function(f,i){return/*#__PURE__*/React.createElement(Cell,{key:i,selected:feeds[selectedFeed].id===f.id,onClick:function onClick(){console.log(i);setSelected(i);}},f.name);}),/*#__PURE__*/React.createElement(NewFeedButton,{onClick:onFeedAdded},\"+ New Feed\")),/*#__PURE__*/React.createElement(EditorWrapper,null,feeds.length>0?/*#__PURE__*/React.createElement(FeedEditor,{onFeedChanged:updateFeed,onFeedDeleted:onFeedDeleted,feed:feeds[selectedFeed],sourceOptions:sources,countryOptions:SourceCountryOptions.slice(),topicOptions:CategoryOptions.slice(),languageOptions:LanguageOptions.slice()}):'You have no Feeds! Create a new one ðŸŒž')));};export default FeedManager;","map":{"version":3,"sources":["/home/snuc/dev/presentable-projects/dayfeed/app/src/components/organisms/feed-manager/FeedManager.tsx"],"names":["React","Editor","Header","EditorPanels","Sidebar","Cell","EditorWrapper","NewFeedButton","FeedEditor","SourceCountryOptions","LanguageOptions","CategoryOptions","getNewsService","useFeedState","useFeedDispatch","v4","FeedManager","props","useState","sources","setSources","selectedFeed","setSelected","feeds","dispatch","useEffect","getSources","feed","service","topic","undefined","language","country","then","res","forEach","s","id","name","push","updateFeed","type","payload","onFeedAdded","newFeed","includedKeywords","optionalKeywords","excludedKeywords","onFeedDeleted","map","f","i","console","log","length","slice"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Editor, Header, EditorPanels, Sidebar, Cell, EditorWrapper, NewFeedButton } from './styled';\nimport { NewsFeed, NewsSource } from '../../../lib/client/types';\nimport FeedEditor from '../feed-editor/FeedEditor';\nimport { SourceCountryOptions, LanguageOptions, CategoryOptions, Category, Language, SourceCountry } from '../../../lib/api/types';\nimport getNewsService from '../../../api/news';\nimport { useFeedState, useFeedDispatch } from '../../../state/feedContext';\nimport { v4 } from 'uuid';\n\n\nconst FeedManager: React.FC = props => {\n    const [sources, setSources] = React.useState<NewsSource[]>([]);\n    const [selectedFeed, setSelected] = React.useState<number>(0);\n    const { feeds } = useFeedState();\n    const dispatch = useFeedDispatch();\n    \n    React.useEffect(() => {\n        async function getSources() {\n            let feed = feeds[selectedFeed];\n            let service = getNewsService();\n            service.getSources(\n                feed ? feed.topic as Category : undefined,\n                feed ? feed.language as Language : undefined,\n                feed ? feed.country as SourceCountry : undefined)\n            .then(res => {\n                let sources: NewsSource[] = []\n                res.forEach(s => { if (s.id && s.name) sources.push({name: s.name, id: s.id}) })\n                setSources(sources);\n            })\n        }\n\n        getSources()\n    }, [selectedFeed, feeds]);\n\n    const updateFeed = (feed: NewsFeed) => dispatch({type: 'update', payload: {feed: feed}})\n\n    const onFeedAdded = () => {\n        let newFeed: NewsFeed = {\n            id: v4(),\n            name: 'New Feed',\n            includedKeywords: [],\n            optionalKeywords: [],\n            excludedKeywords: [],\n            sources: []\n        }\n        dispatch({type: 'add', payload: {feed: newFeed}})\n    }\n\n    const onFeedDeleted = (feed: NewsFeed) => dispatch({type: 'remove', payload: {feed: feed}})\n\n    return (\n        <Editor>\n            <Header>\n                <h3>Feeds</h3>\n            </Header>\n            <EditorPanels>\n                <Sidebar>\n                    {feeds.map((f,i) => <Cell key={i} selected={feeds[selectedFeed].id === f.id} onClick={() => {console.log(i); setSelected(i)}}>{f.name}</Cell>)}\n                    <NewFeedButton onClick={onFeedAdded}>+ New Feed</NewFeedButton>\n                </Sidebar>\n                <EditorWrapper>\n                    { feeds.length > 0 ? \n                        <FeedEditor \n                            onFeedChanged={updateFeed}\n                            onFeedDeleted={onFeedDeleted} \n                            feed={feeds[selectedFeed]} \n                            sourceOptions={sources} \n                            countryOptions={SourceCountryOptions.slice()} \n                            topicOptions={CategoryOptions.slice()} \n                            languageOptions={LanguageOptions.slice()} \n                        /> \n                    : 'You have no Feeds! Create a new one ðŸŒž'}\n                </EditorWrapper>\n            </EditorPanels>\n        </Editor>\n    )\n}\n\nexport default FeedManager;"]},"metadata":{},"sourceType":"module"}